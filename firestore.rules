rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // ========================================
    // FIREBASE SECURITY RULES
    // ========================================
    // These rules control access permissions for all collections
    // 
    // IMPORTANT: Data cleanup when users are deleted is handled by
    // Firebase Functions (see functions/index.js), NOT by these rules.
    // These rules only control who can read/write/delete data.
    //
    // Collections covered:
    // - users: User profiles and authentication
    // - publicChats: Public chat messages
    // - roomMessages: Private room messages  
    // - roomUsers: Room membership records
    // - rooms: Private room definitions
    // - invites: Room and chat invitations
    // - privateChats: Direct message sessions
    // - privateMessages: Direct messages
    // - removalNotifications: User removal alerts
    // - notifications: General user notifications
    // ========================================

    // Helpers
    function isAuthenticated() { return request.auth != null; }
    function nonEmptyString(v, max) { return v is string && v.size() > 0 && v.size() <= max; }

    // USERS: one doc per username
    // { username, uid, createdAt, isOnline, lastSeen }
    match /users/{username} {
      allow read: if isAuthenticated();

      allow create: if isAuthenticated()
                    && nonEmptyString(username, 50)
                    && request.resource.data.username == username
                    && request.resource.data.uid == request.auth.uid;

      allow update: if isAuthenticated()
                    && resource.data.uid == request.auth.uid;

      allow delete: if isAuthenticated()
                    && resource.data.uid == request.auth.uid;
    }

    // PUBLIC CHATS
    // { id, uid, username, message, timestamp, editedAt? }
    match /publicChats/{messageId} {
      allow read: if isAuthenticated();

      allow create: if isAuthenticated()
                    && nonEmptyString(request.resource.data.message, 1000)
                    && nonEmptyString(request.resource.data.username, 50)
                    && request.resource.data.uid == request.auth.uid;

      allow update: if isAuthenticated()
                    && resource.data.uid == request.auth.uid;
      allow delete: if isAuthenticated()
                    && resource.data.uid == request.auth.uid;
    }

    // ROOM MESSAGES
    // { id, roomId, uid, username, message, timestamp, editedAt? }
    match /roomMessages/{messageId} {
      allow read: if isAuthenticated();

      allow create: if isAuthenticated()
                    && nonEmptyString(request.resource.data.roomId, 200)
                    && nonEmptyString(request.resource.data.username, 50)
                    && nonEmptyString(request.resource.data.message, 1000)
                    && request.resource.data.uid == request.auth.uid;

      allow update: if isAuthenticated()
                    && resource.data.uid == request.auth.uid;
      allow delete: if isAuthenticated()
                    && resource.data.uid == request.auth.uid;
    }

    // ROOM USERS (membership mapping)
    // { roomId, uid, username, joinedAt }
    match /roomUsers/{roomUserId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated()
                    && nonEmptyString(request.resource.data.roomId, 200)
                    && nonEmptyString(request.resource.data.username, 50)
                    && request.resource.data.uid == request.auth.uid;
      allow update, delete: if isAuthenticated()
                            && resource.data.uid == request.auth.uid;
    }

    // ROOMS
    // { id, name, createdBy, createdByUid, createdAt, members[] }
    match /rooms/{roomId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated()
                    && nonEmptyString(request.resource.data.name, 100)
                    && nonEmptyString(request.resource.data.createdBy, 50)
                    && request.resource.data.createdByUid == request.auth.uid;
      allow update: if isAuthenticated();
      allow delete: if isAuthenticated()
                    && resource.data.createdByUid == request.auth.uid;
    }

    // INVITES
    // { id, fromUsername, toUsername, fromUid, status, createdAt, respondedAt? }
    match /invites/{inviteId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated()
                    && nonEmptyString(request.resource.data.fromUsername, 50)
                    && nonEmptyString(request.resource.data.toUsername, 50)
                    && request.resource.data.fromUid == request.auth.uid;
      allow update: if isAuthenticated();
      allow delete: if isAuthenticated()
                    && resource.data.fromUid == request.auth.uid;
    }

    // PRIVATE CHATS
    // { id, participants[], participantUids[], createdAt, lastMessageAt }
    match /privateChats/{chatId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated();
      allow delete: if isAuthenticated();
    }

    // PRIVATE MESSAGES
    // { id, chatId, uid, username, message, timestamp, editedAt? }
    match /privateMessages/{messageId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated()
                    && nonEmptyString(request.resource.data.chatId, 200)
                    && nonEmptyString(request.resource.data.username, 50)
                    && nonEmptyString(request.resource.data.message, 1000)
                    && request.resource.data.uid == request.auth.uid;
      allow update: if isAuthenticated();
      allow delete: if isAuthenticated()
                    && resource.data.uid == request.auth.uid;
    }

    // REMOVAL NOTIFICATIONS
    // { id, chatId, removedUsername, removedUid, removedBy, removedByUsername, timestamp, message, read }
    match /removalNotifications/{notificationId} {
      allow read: if isAuthenticated()
                    && resource.data.removedUid == request.auth.uid;
      allow create: if isAuthenticated()
                    && nonEmptyString(request.resource.data.chatId, 200)
                    && nonEmptyString(request.resource.data.removedUsername, 50)
                    && nonEmptyString(request.resource.data.message, 500);
      allow update: if isAuthenticated()
                    && resource.data.removedUid == request.auth.uid;
      allow delete: if isAuthenticated()
                    && resource.data.removedUid == request.auth.uid;
    }

    // GENERAL NOTIFICATIONS
    // { id, recipientUsername, type, message, messagePreview, actionUrl, messageType, createdAt, status }
    match /notifications/{notificationId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated()
                    && nonEmptyString(request.resource.data.recipientUsername, 50)
                    && nonEmptyString(request.resource.data.message, 500);
      allow update: if isAuthenticated();
      allow delete: if isAuthenticated();
    }

    // Deny everything else
    match /{document=**} { allow read, write: if false; }
  }
}